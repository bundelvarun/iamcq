{
	"list_Mcq": [{
			"question": "What is the full form of OOPS?",
			"optiona": "(A) Object Oriented Programming Software.",
			"optionb": "(B) Object Oriented Programming System.",
			"optionc": "(C) Object Oriented Programming Synchronisation.",
			"optiond": "(D) Object Oriented Program System.",
			"ans": "B"
		},
		{
			"question": "What is the full form of OOBS?",
			"optiona": "(A) Object Oriented Base Class System.",
			"optionb": "(B) Object Oriented Beginning System.",
			"optionc": "(C) Object Oriented Before System.",
			"optiond": "(D) Object Oriented Based System.",
			"ans": "D"
		},
		{
			"question": "Which is not related to OOPS?",
			"optiona": "(A) Class and Object.",
			"optionb": "(B) Constructor and Destructor.",
			"optionc": "(C) Structure and Union.",
			"optiond": "(D) Inheritance and Polymorphism.",
			"ans": "C"
		},
		{
			"question": "Which was the first purely object oriented programming language developed?",
			"optiona": "(A) Java",
			"optionb": "(B) C++",
			"optionc": "(C) SmallTalk",
			"optiond": "(D) Kotlin",
			"ans": "C"
		},
		{
			"question": "What is an Object?",
			"optiona": "(A) A variable name of class.",
			"optionb": "(B) A virtual class name in C++.",
			"optionc": "(C) A normal variable declared in C++ class.",
			"optiond": "(D) An alias of class name.",
			"ans": "A"
		},
		{
			"question": "What is a class?",
			"optiona": "(A) A user defines data type.",
			"optionb": "(B) An array of objects.",
			"optionc": "(C) Both A and B",
			"optiond": "(D) A real world entity.",
			"ans": "A"
		},
		{
			"question": "What is the concept of Polymorphism?",
			"optiona": "(A) Inheritance",
			"optionb": "(C) Operator Overloading",
			"optionc": "(B) Function Overloading",
			"optiond": "(D) A, B and C",
			"ans": "D"
		},
		{
			"question": "C++ was originally developed by; ",
			"optiona": "(A) A. Clocksin and Mellish",
			"optionb": "(B) Donald E. Knuth",
			"optionc": "(C) Sir Richard Hadlee",
			"optiond": "(D) Bjame Stroustrup",
			"ans": "D"
		},
		{
			"question": "Who invented OOP?",
			"optiona": "(A) Alan Kay",
			"optionb": "(B) Andrea Ferro",
			"optionc": "(C) Dennis Ritchie",
			"optiond": "(D) Adele Goldberg",
			"ans": "A"
		},
		{
			"question": "When OOP concept did first came into picture?",
			"optiona": "(A) 1970’s",
			"optionb": "(B) 1980’s",
			"optionc": "(C) 1993",
			"optiond": "(D) 1995",
			"ans": "A"
		},
		{
			"question": " Reusability is a desirable feature of a language as it",
			"optiona": "(A) decreases the testing time",
			"optionb": "(B) lowers the maintenance cost",
			"optionc": "(C) reduces the compilation time",
			"optiond": "(D) Both (A) and (B)",
			"ans": "D"
		},
		{
			"question": "Choose the correct remarks. ",
			"optiona": "(A) C++ allows any operator to be overloaded.",
			"optionb": "(B) Some of the existing operators cannot be overloaded.",
			"optionc": "(C) Operator precedence cannot be changed.",
			"optiond": "(D) All of the above.",
			"ans": "C"
		},
		{
			"question": "Overloading is otherwise called as",
			"optiona": "(A) virtual polymorphism",
			"optionb": "(B) transient polymorphism",
			"optionc": "(C) pseudo polymorphism",
			"optiond": "(D) ad-hoc polymorphism",
			"ans": "D"
		},
		{
			"question": "Which of the following is the functionality of ‘Data Abstraction’?",
			"optiona": "(A) Reduce Complexity",
			"optionb": "(B) Binds together code and data",
			"optionc": "(C) Parallelism",
			"optiond": "(D) None of the mentioned",
			"ans": "A"
		},
		{
			"question": "Which of the following mechanisms is/are provided by Object Oriented Language to implement Object Oriented Model?",
			"optiona": "(A) Encapsulation",
			"optionb": "(B) Inheritance",
			"optionc": "(C) Polymorphism",
			"optiond": "(D) All of the mentioned",
			"ans": "B"
		},
		{
			"question": "Which of the these is the functionality of ‘Encapsulation’?",
			"optiona": "(A) Binds together code and data",
			"optionb": "(B) Using single interface for general class of actions.",
			"optionc": "(C) Reduce Complexity",
			"optiond": "(D) All of the mentioned",
			"ans": "A"
		},
		{
			"question": "What is ‘Basis of Encapsulation’?",
			"optiona": "(A) object",
			"optionb": "(B) class",
			"optionc": "(C) method",
			"optiond": "(D) all of the mentioned",
			"ans": "D"
		},
		{
			"question": "How will a class protect the code inside it?",
			"optiona": "(A) Using Access specifiers",
			"optionb": "(B) Abstraction",
			"optionc": "(C) Use of Inheritance",
			"optiond": "(D) All of the mentioned",
			"ans": "A"
		},
		{
			"question": "Which of the following is a mechanism by which object acquires the properties of another object?",
			"optiona": "(A) Encapsulation",
			"optionb": "(B) Abstraction",
			"optionc": "(C) Inheritance",
			"optiond": "(D) Polymorphism",
			"ans": "C"
		},
		{
			"question": "Which of the following supports the concept of hierarchical classification?",
			"optiona": "(A) Polymorphism",
			"optionb": "(B) Encapsulation",
			"optionc": "(C) Abstraction",
			"optiond": "(D) Inheritance",
			"ans": "D"
		},
		{
			"question": "Which Keyword from the following is used to inherit properties from one class into another?",
			"optiona": "(A) extends",
			"optionb": "(B) subclasses",
			"optionc": "(C) native",
			"optiond": "(D) all of the mentioned",
			"ans": "A"
		},
		{
			"question": "Which of the following concept is often expressed by the phrase, ‘One interface, multiple methods’?",
			"optiona": "(A) Abstraction",
			"optionb": "(B) Polymorphism",
			"optionc": "(C) Inheritance",
			"optiond": "(D) Encapsulation",
			"ans": "B"
		},
		{
			"question": "Which of the following type of class allows only one object of it to be created?",
			"optiona": "(A) Virtual class",
			"optionb": "(B) Abstract class",
			"optionc": "(C) Singleton class",
			"optiond": "(D) Friend class",
			"ans": "C"
		},
		{
			"question": "Which of the following is not a type of constructor?",
			"optiona": "(A) Copy constructor",
			"optionb": "(B) Friend constructor",
			"optionc": "(C) Default constructor",
			"optiond": "(D) Parameterized constructor",
			"ans": "B"
		},
		{
			"question": "Which of the following statements is correct?",
			"optiona": "(A) Base class pointer cannot point to derived class.",
			"optionb": "(B) Derived class pointer cannot point to base class.",
			"optionc": "(C) Pointer to derived class cannot be created.",
			"optiond": "(D) Pointer to base class cannot be created.",
			"ans": "B"
		},
		{
			"question": "Which of the following is not the member of class?",
			"optiona": "(A) Static function",
			"optionb": "(B) Friend function",
			"optionc": "(C) Const function",
			"optiond": "(D) Virtual function",
			"ans": "B"
		},
		{
			"question": "Which of the following concepts means determining at runtime what method to invoke?",
			"optiona": "(A) Data hiding",
			"optionb": "(B) Dynamic Typing",
			"optionc": "(C) Dynamic binding",
			"optiond": "(D) Dynamic loading",
			"ans": "C"
		},
		{
			"question": "Which of the following term is used for a function defined inside a class?",
			"optiona": "(A) Member Variable",
			"optionb": "(B) Member function",
			"optionc": "(C) Class function",
			"optiond": "(D) Classic function",
			"ans": "B"
		},
		{
			"question": "Which of the following concept of oops allows compiler to insert arguments in a function call if it is not specified?",
			"optiona": "(A) Call by value",
			"optionb": "(B) Call by reference",
			"optionc": "(C) Default arguments",
			"optiond": "(D) Call by pointer",
			"ans": "C"
		},
		{
			"question": "How many instances of an abstract class can be created?",
			"optiona": "(A) 1",
			"optionb": "(B) 5",
			"optionc": "(C) 13",
			"optiond": "(D) 0",
			"ans": "D"
		},
		{
			"question": "Which of the following cannot be friend?",
			"optiona": "(A) Function",
			"optionb": "(B) Class",
			"optionc": "(C) Object",
			"optiond": "(D) Operator function",
			"ans": "C"
		},
		{
			"question": "Which of the following concepts of OOPS means exposing only necessary information to client?",
			"optiona": "(A) Encapsulation",
			"optionb": "(B) Abstraction",
			"optionc": "(C) Data hiding",
			"optiond": "(D) Data binding",
			"ans": "C"
		},
		{
			"question": "Which of the following is an abstract data type?",
			"optiona": "(A) int",
			"optionb": "(B) double",
			"optionc": "(C) string",
			"optiond": "(D) Class",
			"ans": "D"
		},
		{
			"question": "Which of the following statement is correct?",
			"optiona": "(A) A constructor is called at the time of declaration of an object.",
			"optionb": "(B) A constructor is called at the time of use of an object.",
			"optionc": "(C) A constructor is called at the time of declaration of a class.",
			"optiond": "(D) A constructor is called at the time of use of a class.",
			"ans": "A"
		},
		{
			"question": "Which of the following correctly describes overloading of functions?",
			"optiona": "(A) Virtual polymorphism",
			"optionb": "(B) Transient polymorphism",
			"optionc": "(C) Ad-hoc polymorphism",
			"optiond": "(D) Pseudo polymorphism",
			"ans": "C"
		},
		{
			"question": "Which of the following approach is adapted by C++?",
			"optiona": "(A) Top-down",
			"optionb": "(B) Bottom-up",
			"optionc": "(C) Right-left",
			"optiond": "(D) Left-right",
			"ans": "B"
		},
		{
			"question": "Which of the following is correct about function overloading?",
			"optiona": "(A) The types of arguments are different.",
			"optionb": "(B) The order of argument is different.",
			"optionc": "(C) The number of argument is same.",
			"optiond": "(D) Both A and B.",
			"ans": "D"
		},
		{
			"question": "Which of the following is correct about class and structure?",
			"optiona": "(A) class can have member functions while structure cannot.",
			"optionb": "(B) class data members are public by default while that of structure are private.",
			"optionc": "(C) Pointer to structure or classes cannot be declared.",
			"optiond": "(D) class data members are private by default while that of structure are public by default.",
			"ans": "D"
		},
		{
			"question": "Which of the following concepts means wrapping up of data and functions together?",
			"optiona": "(A) Abstraction",
			"optionb": "(B) Encapsulation",
			"optionc": "(C) Inheritance",
			"optiond": "(D) Polymorphism",
			"ans": "B"
		},
		{
			"question": "Which of the following cannot be used with the keyword virtual?",
			"optiona": "(A) class",
			"optionb": "(B) member functions",
			"optionc": "(C) constructor",
			"optiond": "(D) destructor",
			"ans": "C"
		},
		{
			"question": "Which of the following functions are performed by a constructor?",
			"optiona": "(A) Construct a new class",
			"optionb": "(B) Construct a new object",
			"optionc": "(C) Construct a new function",
			"optiond": "(D) Initialize objects",
			"ans": "D"
		},
		{
			"question": "Which of the following problem causes an exception?",
			"optiona": "(A) Missing semicolon in statement in main().",
			"optionb": "(B) A problem in calling function.",
			"optionc": "(C) A syntax error.",
			"optiond": "(D) A run-time error.",
			"ans": "D"
		},
		{
			"question": "Which of the following concepts is used to implement late binding?",
			"optiona": "(A) Virtual function",
			"optionb": "(B) Operator function",
			"optionc": "(C) Const function",
			"optiond": "(D) Static function",
			"ans": "A"
		},
		{
			"question": "Which of the following factors supports the statement that reusability is a desirable feature of a language?",
			"optiona": "(A) It decreases the testing time.",
			"optionb": "(B) It lowers the maintenance cost.",
			"optionc": "(C) It reduces the compilation time.",
			"optiond": "(D) Both A and B.",
			"ans": "D"
		},
		{
			"question": "Which of the following is a mechanism of static polymorphism?",
			"optiona": "(A) Operator overloading",
			"optionb": "(B) Function overloading",
			"optionc": "(C) Templates",
			"optiond": "(D) All of the above",
			"ans": "D"
		},
		{
			"question": "What happens if the base and derived class contains definition of a function with same prototype?",
			"optiona": "(A) Compiler reports an error on compilation.",
			"optionb": "(B) Only base class function will get called irrespective of object.",
			"optionc": "(C) Only derived class function will get called irrespective of object.",
			"optiond": "(D) Base class object will call base class function and derived class object will call derived class function.",
			"ans": "D"
		},
		{
			"question": "Which of the following are available only in the class hierarchy chain?",
			"optiona": "(A) Public data members",
			"optionb": "(B) Private data members",
			"optionc": "(C) Protected data members",
			"optiond": "(D) Member functions",
			"ans": "C"
		},
		{
			"question": "Which of the following is not a type of inheritance?",
			"optiona": "(A) Multiple",
			"optionb": "(B) Multilevel",
			"optionc": "(C) Distributive",
			"optiond": "(D) Hierarchical",
			"ans": "C"
		},
		{
			"question": "In which of the following a virtual call is resolved at the time of compilation?",
			"optiona": "(A) From inside the destructor.",
			"optionb": "(B) From inside the constructor.",
			"optionc": "(C) From inside the main().",
			"optiond": "(D) Both A and B.",
			"ans": "D"
		},
		{
			"question": "Which of the following statements regarding inline functions is correct?",
			"optiona": "(A) It speeds up execution.",
			"optionb": "(B) It slows down execution.",
			"optionc": "(C) It increases the code size.",
			"optiond": "(D) Both A and C.",
			"ans": "D"
		},
		{
			"question": "Which of the following keyword is used to overload an operator?",
			"optiona": "(A) overload",
			"optionb": "(B) operator",
			"optionc": "(C) friend",
			"optiond": "(D) override",
			"ans": "B"
		},
		{
			"question": "What will happen if a class is not having any name?",
			"optiona": "(A) It cannot have a destructor.",
			"optionb": "(B) It cannot have a constructor.",
			"optionc": "(C) It is not allowed.",
			"optiond": "(D) Both A and B.",
			"ans": "D"
		},
		{
			"question": "Which inheritance type is used in the class given -> class A : public X, public Y {}",
			"optiona": "(A) Multilevel inheritance",
			"optionb": "(B) Multiple inheritance",
			"optionc": "(C) Hybrid inheritance",
			"optiond": "(D) Hierarchical Inheritance",
			"ans": "B"
		},
		{
			"question": "Which of the following is an invalid visibility label while inheriting a class?",
			"optiona": "(A) public",
			"optionb": "(B) private",
			"optionc": "(C) protected",
			"optiond": "(D) friend",
			"ans": "D"
		},
		{
			"question": "Which one of the following options is correct?",
			"optiona": "(A) Friend function can access public data members of the class.",
			"optionb": "(B) Friend function can access protected data members of the class.",
			"optionc": "(C) Friend function can access private data members of the class.",
			"optiond": "(D) All of the above.",
			"ans": "D"
		},
		{
			"question": "Which of the following is used to make an abstract class?",
			"optiona": "(A) Declaring it abstract using static keyword.",
			"optionb": "(B) Declaring it abstract using virtual keyword.",
			"optionc": "(C) Making at least one member function as virtual function.",
			"optiond": "(D) Making at least one member function as pure virtual function.",
			"ans": "D"
		},
		{
			"question": "Which of the following access specifier is used as a default in a class definition?",
			"optiona": "(A) protected",
			"optionb": "(B) public",
			"optionc": "(C) private",
			"optiond": "(D) friend",
			"ans": "C"
		},
		{
			"question": "What is correct about the static data member of a class?",
			"optiona": "(A) A static member function can access only static data members of a class.",
			"optionb": "(B) A static data member is shared among all the object of the class.",
			"optionc": "(C) A static data member can be accessed directly from main().",
			"optiond": "(D) Both A and B.",
			"ans": "D"
		},
		{
			"question": "Which of the following provides a reuse mechanism?",
			"optiona": "(A) Abstraction",
			"optionb": "(B) Inheritance",
			"optionc": "(C) Dynamic binding",
			"optiond": "(D) Encapsulation",
			"ans": "B"
		},
		{
			"question": "Which of the following statement is correct?",
			"optiona": "(A) Class is an instance of object.",
			"optionb": "(B) Object is an instance of a class.",
			"optionc": "(C) Class is an instance of data type.",
			"optiond": "(D) Object is an instance of data type.",
			"ans": "B"
		},
		{
			"question": "Which of the following best defines a class?",
			"optiona": "(A) Parent of an object",
			"optionb": "(B) Instance of an object",
			"optionc": "(C) Blueprint of an object",
			"optiond": "(D) Scope of an object",
			"ans": "B"
		},
		{
			"question": "What is the additional feature in classes that was not in structures?",
			"optiona": "(A) Data members",
			"optionb": "(B) Member functions",
			"optionc": "(C) Static data allowed",
			"optiond": "(D) Public access specifier",
			"ans": "B"
		},
		{
			"question": "Which is not feature of OOP in general definitions?",
			"optiona": "(A) Code reusability",
			"optionb": "(B) Modularity",
			"optionc": "(C) Duplicate/Redundant data",
			"optiond": "(D) Efficient Code",
			"ans": "C"
		},
		{
			"question": "Which Feature of OOP illustrated the code reusability?",
			"optiona": "(A) Polymorphism",
			"optionb": "(B) Abstraction",
			"optionc": "(C) Encapsulation",
			"optiond": "(D) Inheritance",
			"ans": "D"
		},
		{
			"question": "Which language does not support all 4 types of inheritance?",
			"optiona": "(A) C++",
			"optionb": "(B) Java",
			"optionc": "(C) Kotlin",
			"optiond": "(D) Small Talk",
			"ans": "B"
		},
		{
			"question": "How many classes can be defined in a single program?",
			"optiona": "(A) Only 1",
			"optionb": "(B) Only 100",
			"optionc": "(C) Only 999",
			"optiond": "(D) As many as you want",
			"ans": "D"
		},
		{
			"question": "Why Java is Partially OOP language?",
			"optiona": "(A) It supports usual declaration of primitive data types",
			"optionb": "(B) It doesn’t support all types of inheritance",
			"optionc": "(C) It allows code to be written outside classes",
			"optiond": "(D) It does not support pointers",
			"ans": "A"
		},
		{
			"question": "Which of the two features match each other?",
			"optiona": "(A) Inheritance and Encapsulation",
			"optionb": "(B) Encapsulation and Polymorphism",
			"optionc": "(C) Encapsulation and Abstraction",
			"optiond": "(D) Abstraction and Polymorphism",
			"ans": "C"
		},
		{
			"question": "Which feature allows open recursion, among the following?",
			"optiona": "(A) Use of this pointer",
			"optionb": "(B) Use of pointers",
			"optionc": "(C) Use of pass by value",
			"optiond": "(D) Use of parameterized constructor",
			"ans": "A"
		}
	]
}